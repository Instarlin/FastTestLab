stages:
    - build
    - test
    - publish
    - deploy

cache:
  key: "npm-${CI_COMMIT_REF_SLUG}"
  paths:
    - .npm/
  policy: pull-push

build:
    stage: build
    image: node:20-alpine
    before_script:
        - npm ci --cache .npm --prefer-offline
        - npm run prisma:generate
    script:
        - npm run build
    artifacts:
        expire_in: 1h
        paths:
            - "build/"
            - "prisma/"
            - "public/"
            - package.json
            - package-lock.json

test:
    stage: test
    image: node:20-alpine
    timeout: 6 minutes
    services:
    - name: postgres:15-alpine 
      alias: db
    variables:
        POSTGRES_USER: prisma
        POSTGRES_PASSWORD: prisma
        POSTGRES_DB: appdb
        DATABASE_URL: postgres://prisma:prisma@db:5432/appdb
    needs: ["build"] 
    before_script:
        - apk add --no-cache busybox-extras
        - npm ci --cache .npm --prefer-offline
        
        - |
            for path in build prisma; do
                if [ ! -e "$path" ]; then
                echo "Required artifact '$path' not found" >&2
                exit 1
                fi
            done

        - npm run prisma:push
    script:
        - |
            echo "Waiting for Postgres on db:5432…"
            for i in $(seq 1 60); do
                if nc -z db 5432; then
                echo "Postgres is up"; break
                fi
                sleep 1
            done
        - |
            npm run start &
            echo "Waiting for app on localhost:3000…"
            for i in $(seq 1 60); do
                if nc -z localhost 3000; then
                echo "App is up"; break
                fi
                sleep 1
            done
            npm test

publish:
    stage: publish
    image: docker:28
    services: [docker:28-dind]
    dependencies:
        - test
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
    script:
        - docker build --build-arg SESSION_SECRET=$SESSION_SECRET --build-arg ENCRYPTION_SECRET=$ENCRYPTION_SECRET --build-arg NODE_ENV=prod -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    only:
        - master

deploy:
    stage: deploy
    tags:
        - deploy
    image: docker:28
    services: [docker:28-dind]
    dependencies:
        - publish
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
    script:
        - docker pull instarlinz/fasttest:latest
        - docker stop fasttest || true
        - docker rm fasttest || true
        - docker run -d --name fasttest -p 3000:3000 instarlinz/fasttest:latest
    only:
        - master

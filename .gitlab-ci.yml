stages:
    - build
    - test
    - publish
    - deploy

cache:
  key: "npm-${CI_COMMIT_REF_SLUG}"
  paths:
    - .npm/
  policy: pull-push

build:
    stage: build
    image: node:20-alpine
    before_script:
        - npm ci --cache .npm --prefer-offline
        - npm run prisma:generate
    script:
        - npm run build
    artifacts:
        expire_in: 1h
        paths:
            - "build/"
            - "prisma/"
            - package.json
            - package-lock.json

test:
    stage: test
    image: node:20-alpine
    timeout: 6 minutes
    services:
    - name: postgres:15-alpine 
      alias: db
    variables:
        POSTGRES_USER: prisma
        POSTGRES_PASSWORD: prisma
        POSTGRES_DB: appdb
        DATABASE_URL: postgres://prisma:prisma@db:5432/appdb
    needs: ["build"] 
    before_script:
        - apk add --no-cache busybox-extras
        - npm ci --cache .npm --prefer-offline
        
        - |
            for path in build prisma; do
                if [ ! -e "$path" ]; then
                echo "Required artifact '$path' not found" >&2
                exit 1
                fi
            done
    script:
        - |
            echo "Waiting for Postgres on db:5432…"
            for i in $(seq 1 60); do
                if nc -z db 5432; then
                echo "Postgres is up"; break
                fi
                sleep 1
            done
        - npm run prisma:push
        - |
            npm run start &
            echo "Waiting for app on localhost:3000…"
            for i in $(seq 1 60); do
                if nc -z localhost 3000; then
                echo "App is up"; break
                fi
                sleep 1
            done
            npm test

sast:semgrep:
    stage: test
    image: semgrep/semgrep:latest
    rules:
        - if: '$CI_COMMIT_BRANCH'
    script:
        - |
            semgrep ci \
            --config p/auto
            --error \
            --sarif > semgrep.sarif || true
    allow_failure: true
    artifacts:
        when: always
        paths: [semgrep.sarif]
        reports:
            sast: semgrep.sarif

sast:gitleaks:
    stage: test
    image:
        name: zricethezav/gitleaks:latest
        entrypoint: [""]
    rules:
        - if: '$CI_COMMIT_BRANCH'
    script:
        - | 
            gitleaks detect 
            --no-git --redact 
            --report-format sarif 
            --report-path gitleaks.sarif 
            --skip-dirs build,node_modules,prisma/migrations,public
            --verbose
            || true
    allow_failure: true
    artifacts:
        when: always
        paths: [gitleaks.sarif]
        reports:
            sast: gitleaks.sarif

publish:
    stage: publish
    image: docker:28.0.2
    services:
        - name: docker:28.0.2-dind
          alias: docker
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
        DOCKER_DRIVER: overlay2
        DOCKERHUB_REPO: "docker.io/instarlinz/fasttest"
    before_script:
        - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" docker.io --password-stdin
    script:
        - TAG_SHORT="$CI_COMMIT_SHORT_SHA"
        - docker build 
           --build-arg SESSION_SECRET=$SESSION_SECRET 
           --build-arg ENCRYPTION_SECRET=$ENCRYPTION_SECRET 
           --build-arg NODE_ENV=prod 
           -t $DOCKERHUB_REPO:$TAG_SHORT .
        - docker push $DOCKERHUB_REPO:$TAG_SHORT
    only:
        - master

deploy:
    stage: deploy
    tags:
        - deploy
    image: docker:28
    services: [docker:28-dind]
    dependencies:
        - publish
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
    script:
        - docker pull instarlinz/fasttest:latest
        - docker stop fasttest || true
        - docker rm fasttest || true
        - docker run -d --name fasttest -p 3000:3000 instarlinz/fasttest:latest
    only:
        - master

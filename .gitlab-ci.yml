stages:
    - build
    - test
    - publish
    - deploy

cache:
    paths:
        - node_modules/

build:
    stage: build
    image: node:20-alpine
    before_script:
        - npm ci
        - npm run prisma:generate
    script:
        - npm run build
    cache:
        paths:
            - |
                "build/"
                "prisma/"
                "public/"
            - "node_modules/"

test:
    stage: test
    image: node:20-alpine
    timeout: 6 minutes
    services:
    - name: postgres:15-alpine 
      alias: db
    variables:
        POSTGRES_USER: prisma
        POSTGRES_PASSWORD: prisma
        POSTGRES_DB: appdb
        DATABASE_URL: postgres://prisma:prisma@db:5432/appdb
    dependencies:
        - build
    needs:
        - build
    before_script:
        - |
            for path in build prisma node_modules; do
                if [ ! -e "$path" ]; then
                echo "Required artifact '$path' not found"
                exit 1
                fi
            done
        - npm run prisma:push
    script:
        - |
            npm run start &
            apk add --no-cache busybox-extras
            echo "Waiting for database to be ready..."
            nc -zv db 5432
            echo "Waiting for application server to be ready..."
            npm run start &
            for i in $(seq 1 30); do
                nc -z localhost 3000 && break
                sleep 1
            - done

publish:
    stage: publish
    image: docker:28
    services: [docker:28-dind]
    dependencies:
        - test
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
    script:
        - docker build --build-arg SESSION_SECRET=$SESSION_SECRET --build-arg ENCRYPTION_SECRET=$ENCRYPTION_SECRET --build-arg NODE_ENV=prod -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    only:
        - master

deploy:
    stage: deploy
    tags:
        - deploy
    image: docker:28
    services: [docker:28-dind]
    dependencies:
        - publish
    variables:
        DOCKER_HOST: "tcp://docker:2375"
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD
    script:
        - docker pull instarlinz/fasttest:latest
        - docker stop fasttest || true
        - docker rm fasttest || true
        - docker run -d --name fasttest -p 3000:3000 instarlinz/fasttest:latest
    only:
        - master
